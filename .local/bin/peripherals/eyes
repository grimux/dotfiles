#!/usr/bin/env bash
#
############
### Info ###
############
#
### Description ###
# A script for controlling redshift to help with my light sensitivities and migraines.
#
### How it works ###
# It utilizes two configuration files, a normal mode and a hurt mode.  The script will
# link the proper config file to redshift's default config file, "redshift.conf".
# This ensures that settings are saved between X sessions and reboots.  Settings will
# only change when this script is run with the proper arguments.


###################
### Fail Events ###
###################
# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
#set -euox pipefail
set -euo pipefail


##############
### Config ###
##############
#
### Temp/Brightness ###
temp="2100:2100"					# Temperature for day:night
bright="0.60:0.45"					# Brightness for day:night

### Files ###
conf_dir="$HOME/.config/redshift"
hurt_conf_file="$conf_dir/hurt.conf"	# Configuration file for low mode.
sunglasses_conf_file="$conf_dir/sunglasses.conf"
normal_conf_file="$conf_dir/normal.conf"
current_conf_file="$conf_dir/redshift.conf"

### Call to redshift ###
# Can be either "redshift-gtk" to get the tray icon, or just "redshift".
# call_redshift="redshift"
call_redshift="redshift-gtk"



#################
### Functions ###
#################
#
function usage() {
	echo "Do your eyes \"hurt\" or are they \"okay\"?"
	echo "Or maybe you are using \"sunglasses\"?"
}

# Get the current status.
# It just prints out the config file and doesn't actually get live values.
function get_status() {
	echo "Current status:"
	redshift -p
}

# Set redshift to hurt mode.
# Creates a link to the hurt config file and names is "redshift.conf".
function set_to_low() {
	# Kill redshift if it is running.
	kill_redshift

	# Create a link to the hurt file.  The link is called "redshift.conf".
	ln \
		--force \
		"$hurt_conf_file" \
		"$current_conf_file"


	# Start redshift using the normal configuration file.  Send all output to null.
	$call_redshift &> /dev/null &
}

# Set redshift to sunglesses mode.
# Creates a link to the hurt config file and names is "redshift.conf".
function set_to_sunglasses() {
	# Kill redshift if it is running.
	kill_redshift

	# Create a link to the hurt file.  The link is called "redshift.conf".
	ln \
		--force \
		"$sunglasses_conf_file" \
		"$current_conf_file"


	# Start redshift using the normal configuration file.  Send all output to null.
	$call_redshift &> /dev/null &
}


# Set redshift to low mode by using arguments.
function set_to_low_args() {
	# Call redshift and apply the settings.
	$call_redshift \
		-r \
		-t "$temp" \
		-b "$bright" \
		&> /dev/null \
		&
}

# Set redshift to normal mode.
# Creates a link to the normal config file and names is "redshift.conf".
function set_to_normal() {
	# Kill redshift if it is running.
	kill_redshift

	# Create a link to the normal file.  The link is called "redshift.conf".
	ln \
		--force \
		"$normal_conf_file" \
		"$current_conf_file"

	# Start redshift using the default configuration file.  Send all output to null.
	$call_redshift &> /dev/null &
}

function set_redshift_mode() {
	local mode
	local mode_conf_file
	mode="$1"

	case "$mode" in
		okay|ok|o) mode_conf_file="$normal_conf_file" ;;
		sunglasses|sun|s) mode_conf_file="$sunglasses_conf_file" ;;
		hurt|h) mode_conf_file="$hurt_conf_file" ;;
		*) mode_conf_file=null; usage; return 1;;
	esac

	# Kill redshift if it is running.
	kill_redshift

	# Create a link to the mode file.  The link is called "redshift.conf".
	ln \
		--force \
		"$mode_conf_file" \
		"$current_conf_file"

	# Start redshift using the default configuration file.  Send all output to null.
	$call_redshift &> /dev/null &
}

function give_output() {
	local mode
	local emoji
	local message

	mode="$1"
}

# If redshift is found running, kill it.
# Multiple instances of redshift running causes settings to stack and monitor flickering.
# So it's important to ensure only one is ever running.
function kill_redshift() {
	if pgrep redshift > /dev/null; then
		killall redshift
	fi
}



############
### Main ###
############
function main() {
	# My current condition, passed as an argument.
	local condition="$@"

	# Main logic.  Only two possible arguments; "okay" and "hurt".
	case "$condition" in
		# If no argument, show status.
		"") usage; echo ; get_status;;

		# If your eyes are hurting.
		hurt|h) echo "Sorry your eyes hurt...  Let me help."; set_to_low;;

		# Sunglasses mode.
		sunglasses|sun|s) echo "Be sure to put on your shades."; set_to_sunglasses;;

		# If your eyes are okay.
		okay|ok|o) echo "You must be feeling better!"; set_to_normal;;

		# Anything else entered is not recognized.
		*) echo "Sorry, I don't recognize that command."; usage; exit 1;;
	esac
}


###############
### Testing ###
###############
function testing() {
	# Enable debug output
	set -euox pipefail

	# Local variables
	local condition

	# Initialize
	condition="$1"

	# Set redshift mode
	set_redshift_mode "$condition"

	# Give some terminal output.
	give_output "$condition"
}


####################
### Call to main ###
####################
main "$@"
#testing "$1"
