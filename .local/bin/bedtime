#!/usr/bin/env bash
#
# A script to run at bedtime.  It will play a video playlist and a music playlist.
# By editing bedtime.m3u, we can change which videos are played.
#
# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
#set -euox pipefail
set -euo pipefail

############
### TODO ###
############
# - Decide if I want mpv to open on a specific tab.
# - Add more comments to functions.
# - Mimimize console window on startup.
# - Cleanup output and make less confusing.
#

# Bedtime playlist file.
# This file can be edited to play whatever videos I want at bedtime.
# You can even add playlists to the playlist file and it will play them all.
bedtime_playlist="$HOME/Videos/playlists/bedtime.m3u"

# Alsa names for the TV and PC
tv_alsa_id="alsa_output.pci-0000_0a_00.1.hdmi-stereo"
pc_alsa_id="alsa_output.pci-0000_0c_00.3.analog-stereo"
combined_alsa_id="combined"

# Delaying and allowing the screensaver.
# This script will extend and enable the screensaver for when mpv is playing.
# This can be set here (in seconds).
mpv_screensaver_timeout="3600" # 1 hour
# The default time to reset to is taken from the current setting using awk.
default_screensaver_timeout=$(xset q | awk '/timeout/{print $2}')

# Save the currently active window at the time of script execution.  This makes
# it convenient to switch back later.
console_window=$(xdotool getactivewindow)

# Get arguments
get_arguments() {
	while getopts ":lhe" option; do
		case $option in
			l) list_playlist_contents; exit;;
			e) edit_bedtime_playlist; exit;;
			h) help_section; exit;;
			\?) echo "Error: Invalid option"; exit;;
		esac
	done
}

# Help Section
help_section() {
	# Help Message.  4 space offset.
	echo "A script to play specific videos at bedtime."
	echo "usage:"
	echo "    $(basename $0) [-h|-l|-e]"
	echo
	echo "options:"
	echo "h     Print this help screen."
	echo "l     Print out the bedtime playlist."
	echo "e     Edit the bedtime playlist in vim."
}

# List playlists
list_playlist_contents() {
	echo "### Bedtime Playlist ###"
	echo
	cat "$bedtime_playlist"
}

# Edit the playlist in vim.
edit_bedtime_playlist() {
	nvim "$bedtime_playlist"
}

# Start mpv with the given playlist.
launch_mpv() {
	# The playlist file is passed to launch_mpv and stored in a variable.
	local playlist="$1"

	# Call to mpv with the playlist file.
	# If there is a watch later file, ignore it.
	# Don't disable the screensaver.
	mpv \
		--no-resume-playback \
		--stop-screensaver=no \
		--playlist="$playlist"
}

function play_brown_noise() {
	local is_brown_noise_playing

	# Old Method
	#mpc clear
	#mpc load brown_noise
	#mpc volume 90
	#mpc play

	# Use brown_noise script to check if it is playing or not.
	is_brown_noise_playing=$(brown_noise -c)

	# Logic to control what to do.
	if [ "$is_brown_noise_playing" -eq 0 ]; then
		brown_noise
	else
		echo "Brown noise already playing."
	fi
}

function play_game_chill() {
	mpc clear
	mpc load game_chill
	mpc volume 100
	mpc play
}

function set_mpd_playlist() {
	local playlist
	declare -i volume

	playlist="$1"
	volume="$2"

	echo "--- MPD ---"
	echo "Loading playlist: $playlist"

	mpc clear
	mpc load "$playlist"
	sleep 1
	mpc volume $volume
	mpc play

	echo "Done."
	echo "-----------"
}

# Switch to tag 8 in awesomewm.  This tag is for video players such as mpv.
move_to_video_tag() {
	xdotool search --name "mpv" windowactivate
	#xdotool key --delay 100 Super_L+8
}

# Move back to the previous window.
move_to_previous_window() {
	xdotool windowactivate $console_window
}

set_screensaver_timeout() {
	local timeout="$1"
	declare -i real_timeout

	xset s "$timeout"

	real_timeout=$(($timeout / 60))

	echo "=== Screensaver timeout: $real_timeout mins. ==="

}

# Switch to change the audio sink.
change_audio_sink() {
	# Name of sink to use, passed as an argument
	# "tv", "pc", or "combined"
	local device_name="$1"

	# Index id of TV in alsa.
	local tv_index=$(get_device_index "$tv_alsa_id")

	# Index id of PC sound card in alsa.
	local pc_index=$(get_device_index "$pc_alsa_id")

	# Index id of combined sink in alsa.
	local combined_index=$(get_device_index "$combined_alsa_id")

	# Case to set the default sink, based on its id.
	case "$device_name" in
		"tv") pacmd set-default-sink $tv_index;;
		"pc") pacmd set-default-sink $pc_index;;
		"combined") pacmd set-default-sink $combined_index;;
	esac

}

minimize_console_window(){
	xdotool windowminimize --sync "$console_window"
}

restore_console_window(){
	xdotool windowactivate --sync "$console_window"
}

# Function that returns the index in pacmd for the given alsa name.
get_device_index() {
	local alsa_name="$1"
	pacmd \
		list-sinks \
		| grep \
		--before-context=1 \
		"$alsa_name" | \
		grep "index" | \
		sed 's/[^0-9]*//'
}

############
### Main ###
############
#
main() {
	# Get arguments
	get_arguments "$@"

	# Using mpc, play brown noise with mpd.
	play_brown_noise
	#set_mpd_playlist "brown_noise" "90"

	# Immediately stop mpd, so music won't play over video.
	mpc stop > /dev/null

	# Switch the pulseaudio sink to the TV for video playback.
	#change_audio_sink "combined"

	# Set timeout for screensaver (xset s time).
	set_screensaver_timeout "$mpv_screensaver_timeout"

	# Display output to tell about the screensaver.
	echo "Screensaver will still activate while video is playing."

	# Minimize the console window.
	minimize_console_window

	# Launch mpv and play the playlist file.
	launch_mpv "$bedtime_playlist"

	sleep 1

	# Switch to the tag that will have mpv on it.
	#move_to_video_tag

	wait

	# Once the playlist is complete, switch back to the previous window.
	#move_to_previous_window

	# Switch the pulseaudio sink back to the PC.
	#change_audio_sink "pc"

	# Set screensaver timeout back to default.
	set_screensaver_timeout "$default_screensaver_timeout"

	# Restore console window from being minimized.
	restore_console_window

	# Start music, won't happen until video playlist is completed.
	# Uses mpc to control mpd.
	mpc play > /dev/null
	#play_game_chill
	#set_mpd_playlist "game_chill" "100"

	# Good morning message
	echo
	echo "Good morning!"
}

###############
### Testing ###
###############
#
testing() {
	# Get arguments
	get_arguments "$@"

	# Immediately stop mpd, so music won't play over video.
	#mpc stop > /dev/null

	# Switch the pulseaudio sink to the TV for video playback.
	change_audio_sink "combined"

	# Launch mpv and play the playlist file.
	#launch_mpv "$bedtime_playlist"

	sleep 1

	# Switch to the tag that will have mpv on it.
	move_to_video_tag

	wait

	# Once the playlist is complete, switch back to the previous window.
	move_to_previous_window

	# Switch the pulseaudio sink back to the PC.
	change_audio_sink "pc"

	# Start music, won't happen until video playlist is completed.
	#mpc play

	# Good morning message
	echo
	echo "Good morning!"

}

####################
### Call to main ###
####################
#
#testing "$@"
main "$@"


