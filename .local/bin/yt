#!/usr/bin/bash
#
# A wrapper for yt-dlp
#
# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
set -euox pipefail
#set -euo pipefail




##############
### Config ###
##############
# Directory location for downloading videos.
video_download_location="$HOME/Videos/yt-dlp"

# Directory location for downloading audio.
audio_download_location="$HOME/Music/yt-dlp"

## Output type ##
# Output format for yt-dlp to use when downloading playlists.
#playlist_output_format="%(playlist)s/%(playlist_index)s-%(title)s.%(ext)s"
#playlist_output_format="%(playlist_index)s-%(title)s.%(ext)s"
playlist_output_format="%(playlist_index)s-%(title)s.%(ext)s"
#
# Output format for yt-dlp to use when downloading a single file.
single_output_format="%(channel)s-%(title)s.%(ext)s"
#
# Format to be chosen by the user.
chosen_format=""

# Archive location and file.
archive_directory="$HOME/.config/youtube-dl/archives"
archive_file=""
archive_extension="archive"

# m3u playlist file name and location.
m3u_directory="$HOME/Videos/playlists"
m3u_playlist_file=""

# Global flags and variables.
resolution="1080"
check_size=0
batch_mode=0
playlist_mode=0
extract_audio_mode=0
split_chapters_mode=0
archive_mode=0
format_filter="bestvideo[height<=$resolution][ext=webm]+bestaudio"

# User variables
batch_file=""
url=""




########################
### yt-dlp arguments ###
########################
# List of arguments for video downloading.
# --format: used to select the resolution we want, along with the extension
# 	    and merge it with the best audio.
#
# -- output: controls the directory structure for where to play files.
#
# -- restrict-filenames: makes it so weird unicode characters stay our of our filename.
#                        youtube really likes to use them and they mess with playlists.
yt_arguments=(
	--embed-subs
	--embed-thumbnail
	--add-metadata
	--restrict-filenames
	--sponsorblock-remove sponsor
	--merge-output-format mkv
	--format $format_filter
)


#################
### Functions ###
#################
# Help Section
help_section() {
	echo "A wrapper for yt-dlp and playlist management."
	echo
	echo "Syntax: $(basename $0) [-h|a|z] [-o] <output directory> [-c] <name of archive> [-p] <name of m3u> [-r] <resolution> -u <URL>"
	echo "options:"
	echo "u     URL to download."
	echo "a     Archive file to use (required with p). Stored in .config"
	echo "o     Set output directory."
	echo "p     Enable playlist mode."
	echo "r     Resolution of video to download. Defaults to 1080p."
	echo "h     Print this help screen."
	echo "l     List archive files."
	echo "b     Read URLs from file (batch)."
	echo "x     Extract audio only."
	echo "s     Split video by chapter."
	echo "z     Get size of the provided URL."
	echo
}

# Get the size of a playlist.  Relies upon an external python script to calculate.
# First argument passed should be the prefered resolution.
# Second argument is the URL of the playlist.
# If no resolution is specified, 1080p will be used.
get_playlist_size_easy() {
	# Call to totalsize.  It is a python script that will calculate the total size
	# of the URL provided.
	totalsize \
		--format-filter "$format_filter" \
		"$url"
}

# List out the archives from the archive directory.
list_archives() {
	local archives
	archives=($archive_directory/*)

	for file in ${archives[@]}; do
		echo $(basename "$file")
	done
}

# Download the video, either a single video or playlist.
download_video() {
	# Call to yt-dlp.
	yt-dlp --paths $video_download_location ${yt_arguments[@]} ${url[@]}


}

# Function used to create m3u playlists for use with UMS and mpv.
create_m3u_playlist() {
	echo "Creating Playlist."
}

# Check if the provided resolution (-r) is supported by the script.
check_resolution() {
	# Array of supported resolutions.
	local supported_resolutions=(1080 720 480)

	# If the supplied resolution is not found in the array, tell us, tell us the supported
	# resolutions, and exit with error.
	if [[ ! "${supported_resolutions[@]}" =~ "$resolution" ]]; then
		echo "$resolution is not supported."
		echo "Supported resolutions: ${supported_resolutions[@]}"
		exit 1
	fi
}

# Get arguments and set flags
get_arguments() {
	while getopts ":o:lu:hpr:a:xszb:" option; do
		case $option in
			# What to do if there is an invalid argument.
			\?) echo "Error: Invalid option"; exit 1 ;;

			# Audio mode
			x) extract_audio_mode=1 ;;

			# Batch mode
			b) batch_mode=1; batch_file="${OPTARG}"; ;;

			# d flag is to override the default download location.
			o) video_download_location="${OPTARG}" ;;

			# A flag is for creating an archive file for yt-dlp.
			a) archive_file="${OPTARG}" ;;

			# u flag is for the URL to download.
			u) url+="${OPTARG}" ;;

			# Open the help section
			h) help_section; exit ;;

			# Set the resolution of video to download
			r) resolution="${OPTARG}"; check_resolution "$resolution" ;;

			# Playlist mode
			p) playlist_mode=1 ;;

			# List out the current archives.
			l) list_archives; exit 0;;

			# Split mode
			s) split_chapters_mode=1 ;;

			# Get size of provided URL
			z) check_size=1 ;;

			:) echo "Missing argument."; help_section; exit 1 ;;
		esac
	done
}

### Main logic ###
main() {
	get_arguments "$@"
	# If the url variable is empty, tell us with an error.
	if [ -z "$url" ] && [ -z "$batch_file" ]; then
		echo "No URL/batch provided."
		exit 1
	fi

	# If check_size mode is enabled, get the size of the provided URL
	# Resolution is optional, defaults to 1080p.
	if [ $check_size -eq 1 ]; then
		get_playlist_size_easy "$url"
		exit
	fi

	# Set which type of formating we want for the file.
	# Either playlist format or single.
	if [ "$playlist_mode" -eq 1 ] && [ -n "$archive_file" ]; then
		# Playlist formatting
		chosen_format="$playlist_output_format"
		# Add the archive file to the array of arguments.
		#yt_arguments+=" --download-archive $archive_directory/$archive_file"
		yt_arguments+=" --download-archive $archive_file"
	elif [ "$playlist_mode" -eq 1 ] && [ -z "$archive_file" ]; then
		echo "Playlist download requires and archive.  Please specify with \"-a [archive name]\"."
		exit 1
	fi

	# Append this argument to the arguments array.
	yt_arguments+=" --output $chosen_format"

	# If extract audio is selected, the argument is appended to the argument array.
	if [ "$extract_audio_mode" -eq 1 ]; then
		yt_arguments+=" --extract-audio"
	fi

	# Check to see if batch mode was selected.
	if [ "$batch_mode" -eq 1 ]; then
		echo "Batch file: $(basename $batch_file)"
		yt_arguments+=" --batch-file $batch_file"
		download_video
		exit
	fi

	if [ "$split_chapters_mode" -eq 1 ]; then
		echo "Splitting at chapters: ON"
		yt_arguments+=" --split-chapters"
	fi

	# Final step.
	echo "url to download: $url"
	echo "Videos will be downloaded to: $video_download_location"
	download_video "${url[@]}"

}

# Main testing function
main_testing() {
	get_arguments "$@"
}
main "$@"
#main_testing "$@"
