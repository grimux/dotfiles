#!/usr/bin/env sh
# My backup script, ported to linux

# Debug
debug=1
STATUS="live"

# vars
USBFILE=$(lsblk -f | awk '/small-drive/ {print $1}')
USBFILE=/dev/"${USBFILE:2}"	# Cut first two characters from ouput of last command
SHAREFILE=$(lsblk -f | awk '/backup-drive/ {print $1}')
SHAREFILE=/dev/"${SHAREFILE:2}"
DESTINATION="/run/media/jake/small-drive"
SHAREDESTINATION="/run/media/jake/backup-drive/"
DRY_RUN=0
VERBOSE=0

# Yes or no prompt
# call by: yes_or_no "$message" && command
function yes_or_no {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;  
            [Nn]*) echo "Aborted" ; return  1 ;;
        esac
    done
}

# Function call to rsync
call_rsync() {
	rsync -rtlHsv $3 --delete --modify-window=1 $1 $2
}

call_7zip() {
	7z u -up1q0r2x1y2z1w2 -mx9 -mmt16 "$1" "$2"
}

# Spacer, for pretty output
spacer_big() {
	echo ========================================================
}

spacer_small() {
	echo --------------------------------------------------------
}

backing_up() {
	echo "Backing up $1..."
}

backup_files() {
	additional_flags=""
	# Check if we want to do a dry run.
	if dry_run_check; then
		additional_flags+="-n "
	fi

	if verbose_check; then
		additional_flags+="-v "
	fi
	# Documents
	spacer_big
	backing_up "Documents"
	spacer_small
	call_rsync "/home/jake/Documents/" "$DESTINATION/Backups/docs-jake" "$additional_flags"
	echo

	# Music
	spacer_big
	backing_up "Music"
	spacer_small
	call_rsync "/home/jake/Music/" "$DESTINATION/Backups/music" "$additional_flags"
	echo

	# Wallpapers
	spacer_big
	backing_up "Wallpapers"
	spacer_small
	call_rsync "/home/jake/Pictures/wallpapers" "$DESTINATION/Backups/wallpapers" "$additional_flags"
	echo

	# Screenshots
	spacer_big
	backing_up "Screenshots"
	spacer_small
	call_rsync "/home/jake/Pictures/screenshots" "$DESTINATION/Backups/screenshots" "$additional_flags"
	echo

	# Game screenshots
	spacer_big
	backing_up "Game Screeenshots"
	spacer_small
	call_rsync "/home/jake/Pictures/game-screenshots" "$DESTINATION/Backups/game-screenshots" "$additional_flags"
	echo
}

# 7zip archive backups
backup_archives() {
	# Backup some folders in .local/share
	# A lot of saved information is stored here by programs.  I don't want to track it with
	# git, so I will just archive it.
	spacer_big
	echo 7zip backups...
	spacer_small

	# Calcurse
	spacer_small
	backing_up "Calcurse"
	#call_7zip "$DESTINATION/Backups/linux/calcurse.7z" "$HOME/.local/share/calcurse"
	spacer_small

	# Lutris
	spacer_small
	backing_up "Lutris"
	#call_7zip "$DESTINATION/Backups/linux/lutris.7z" "$HOME/.local/share/lutris"
	spacer_small
}

# Backup share drive
backup_share() {
	additional_flags=""
	# Check if we want to do a dry run.
	if dry_run_check; then
		additional_flags+="-n "
		echo "Initalizing dry run..."
	fi

	if verbose_check; then
		additonal_flags+="-v "
		echo "rsync ran with -v"
	fi
	# Share drive
	spacer_big
	backing_up "Share"
	spacer_small
	call_rsync "/home/jake/share/" "$SHAREDESTINATION" "$additional_flags"
	echo
	
}

# Check for dry run flag
dry_run_check() {
	if [ $DRY_RUN -eq 1 ];
	then
		return 0
	else
		return 1
	fi
}

# Check for verbose flag
verbose_check() {
	if [ $VERBOSE -eq 1 ];
	then
		return 0
	else
		return 1
	fi
}

# Debug mode check
debug_check() {
	if [ $debug -eq 1 ];
	then
		echo Debug mode on, dry runs only
		DRY_RUN="-n";
		STATUS="dry-run"
	fi
}

mount_check() {
	if [ ! -d "$1" ]; then
		echo "Drive not mounted"
		return 1
	else
		return 0
	fi
}

plugged_in_check() {
	if [ "$1" == "/dev/" ]; then
		echo "Drive not plugged in"
		return 1
	else
		return 0
	fi
}

mount_drive() {
	sudo mkdir -p $2
	sudo mount -o uid=1000 $1 $2 && echo "Drive mounted successfully."
}

# all done message.
all_done() {
	echo "All finished."
}

cleanup() {
	echo "Waiting for a few seconds..."
	sleep 5
	sudo umount -r "$1" && echo "Drive unmounted."
	sudo rmdir "$1" && echo "Mount directory removed."
	echo "Completed backup."
}

get_args() {
	while getopts ":hnv" option; do
		case $option in
			h)
				help_section
				exit
				;;
			n)
				echo dry run on
				DRY_RUN=1
				;;
			v)
				echo verbose on
				VERBOSE=1
				;;
			\?)
				echo "Invalid option"
				exit 1
				;;
		esac
	done
}


main() {
	# Set arguments to a variable
	args="$@"

	# If there are multiple arguments, strip all but the last
	if [ $# -gt 1 ]; then
		args="${@: -1}"
	fi

	# Case for checking arguments
	case "$args" in
		"")
			# fallthrough
			;&
		files)
			plugged_in_check "$USBFILE" || exit 1
			if ! mount_check "$DESTINATION/Backups"; then
				yes_or_no "Would you like to mount it?" || exit 1
				mount_drive "$USBFILE" "$DESTINATION"
			fi
			backing_up "Files"
			backup_files
			all_done
			yes_or_no "Would you like to unmount the drive?" || exit 0
			cleanup "$DESTINATION"
			exit
			;;
		archives)
			backing_up "Archives"
			exit
			;;
		share)
			plugged_in_check "$SHAREFILE" || exit 1
			if ! mount_check "$SHAREDESTINATION"; then
				yes_or_no "Would you like to mount it?" || exit 1
				mount_drive "$SHAREFILE" "$SHAREDESTINATION"
			fi
			backup_share
			all_done
			yes_or_no "Would you like to unmount the drive?" || exit 0
			cleanup "$SHAREDESTINATION"
			exit
			;;
		*)
			echo "Invalid command"
			;;
	esac
}


get_args "$@"
main "$@"
