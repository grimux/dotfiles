#!/usr/bin/env bash
#
# A script to update a file of my current pacman and yay packages.
#
############
### TODO ###
############
#
# - Add some comments.
# - Clean up code.
#

# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
#set -euox pipefail
set -euo pipefail

package_list_file="$HOME/.config/packages.txt"
package_info_file="$HOME/.config/package-info.txt"
config="git --git-dir=$HOME/.local/share/dotfiles --work-tree=$HOME"

function create_package_file() {
	pacman \
		--query \
		--explicit \
		--quiet \
		> "$package_list_file"
}

function create_info_file() {
	pacman \
		--query \
		--explicit \
		--info \
		> "$package_info_file"
}

function update_git() {
	$config add "$package_list_file"
	$config add "$package_info_file"
	$config commit -m "Installed packages update."
}

function check_file() {
	local file_changed=0
	local file_to_check

	file_to_check="$1"

	if $config diff --exit-code $file_to_check > /dev/null 2>&1; then
		file_changed="0"
	else
		file_changed="1"
	fi

	echo "$file_changed"
}


function main() {
	local has_list_file_changed
	local has_info_file_changed

	create_package_file
	create_info_file

	# Pacman package list.
	has_list_file_changed=$(check_file "$package_list_file")
	has_info_file_changed=$(check_file "$package_info_file")

	if [ $has_list_file_changed -eq 1 ] || [ $has_info_file_changed -eq 1 ]; then
		echo "File(s) have changed."
		update_git
	else
		echo "File(s) have not changed.  Aborting..."
		exit 1
	fi
}

main
