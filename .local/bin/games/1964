#!/usr/bin/env sh
#
# Wrapper script to run and manage the Nintendo 64
# emulator 1964 Goldeneye Perfect Dark build.
#
# Jake Meredith
#

###################
### Fail Events ###
###################
# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
#set -euox pipefail
set -euo pipefail


##############
### Config ###
##############
# Location of emulator
emudir="/mnt/s/games/1964"

# Executable
exe="1964.exe"

# Proton directory.
proton_directory="/home/jake/.local/share/Steam/steamapps/common"
proton_executable="files/bin/wine"

# Version of wine or proton to use.
#wine_version="wine"
wine_version="$proton_directory/Proton - Experimental/$proton_executable"

# Wine prefix to use.
WINEPREFIX="$emudir/bottle"

############
### Data ###
############
# List of N64 Games
# The array index corresponds to the rom's filename
# Array contents is the full name of the game
declare -A game_list=(
	[ge]="GoldenEye 007"
	[gf]="Goldfinger 007"
	[pd]="Perfect Dark"
)




#################
### Functions ###
#################
#
# Help Section
help_section() {
	echo "A script to launch 1964 GEPD Edition"
	echo
	echo "Syntax: $(basename $0) [-c|h|l] [game name]"
	echo "options:"
	echo "c     Configure 1964."
	echo "h     Print this help screen."
	echo "l     List installed mods."
	echo "r     Open readme."
	echo
}

# Call to wine.
launch_game() {
	# Local variables to store the title and overclock amount.
	local title="$1"
	local overclock="$2"

	# Call to wine.
	# -g: rom name
	# -f: fullscreen
	# -o: overclock amount; 6 for Goldeneye, 9 for Perfect Dark.
	"$wine_version" \
		"$emudir/$exe" \
		-g "$title.z64" \
		-f \
		-o "$overclock"

}

# List the games
list_games() {
	echo "$(basename $0) - Currently installed games:"
	for i in ${!game_list[@]}; do
		echo "$i -- ${game_list[$i]}"
	done
}

# Launch game
check_game() {
	local game=$1
	local exists=0

	# Loop through array, searching for a match
	for i in "${!game_list[@]}"; do
		# if array[i] == arg
		if [ "$i" == "$1" ]; then
			# Unset error flag
			exists=1
			break
		else
			exists=0
		fi

	done

	# Return result.  1 exists, 0 does not exist.
	echo "$exists"

}

# Launch config
launch_config() {
	wine $emudir/$exe
}

# Open Readme
open_readme() {
	less $emudir/BUNDLE_README.txt
}

# Get arguments
get_arguments() {
	while getopts ":hclr" option; do
		case $option in
			# Launch the emulator to configure it.
			c) launch_config; exit;;

			# Help section and usage.
			h) help_section; exit;;

			# List the games.
			l) list_games; exit;;

			# Open the readme for 1964.
			r) open_readme; exit;;

			# Invalid option.
			\?) echo "Error: Invalid option"; exit;;

		esac
	done
}


############
### Main ###
############
main() {
	# Get option arguments, if there are any.
	get_arguments "$@"

	# Local variable of the game's name.  This assumes that no options were passed to the script.
	local game="$@"

	# If no argument, then list the games
	if [ -z "$1" ]; then
		help_section
		list_games
		exit
	fi

	# Check to see if the game exists within the array.
	# Result assigned to a variable.  1 exists, 0 does not.
	does_game_exist=$(check_game "$game")

	# Logic if the game does not exist.
	# Tell us then exit with error.
	if [ $does_game_exist -eq 0 ]; then
		echo "That game does not exist."
		exit 1
	fi

	# Once the check passes, the game will launch based on a case statement.
	# ge is GoldenEye, with overclock of 6.
	# pd is Perfect Dark, with overclock of 9.
	# gf is Goldfinger rom hack, with overclock of 6.
	case "$game" in
		pd) launch_game "$game" "9";;
		ge) launch_game "$game" "6";;
		gf) launch_game "$game" "6";;
	esac
}


####################
### Call to main ###
####################
main "$@"
