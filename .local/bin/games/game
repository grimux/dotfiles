#!/usr/bin/env bash

# Game backup script

##########################
### Script Fail Events ###
##########################
# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
#set -euox pipefail
set -euo pipefail

###########################################################
### TODO ##################################################
#
# - Add more comments.
# - Add ability to delete and restore archives.
# - Move config section to separate file.
# - Add ability to restore special save circumstance.
#
###########################################################


##############
### Config ###
##############
# Configuration file locations.
# These are read into arrays for the script to access.
save_locations_conf="$HOME/.config/game/game_save_locations.cfg"
archive_locations_conf="$HOME/.config/game/game_archive_locations.cfg"

# Remote backup location on Google Drive that rclone will access.
rclone_backup_location="gdrive:Game Stuff/save-backups"

# Dry-run mode flag.
dry_run_mode=0

# Set this flag to performe actions on archives instead of save files.
archive_mode=0

# Size of data in the config file.  3 lines of data.
# The file has the following format:
# Line 1: Title
# Line 2: pc save
# Line 3: backup save
size_of_data_block=3

# Rsync arguments
rsync_arguments=(
	--recursive
	--verbose
	--times
	--human-readable
	--delete
	--modify-window=1
)


#################
### Functions ###
#################
# Help
help_section() {
	echo "A script to manage game saves."
	echo
	echo "Syntax: $(basename $0) [-h|l|n] [command] <game name>"
	echo "options:"
	echo "h     Print this help screen."
	echo "l     List games and exit."
	echo "n     Dry-run mode."
	echo
	echo "commands:"
	echo "backup                    Backup game saves"
	echo "archive                   Compress game archives"
	echo "restore (game title)      Restore the specified game's save."
	echo "delete (game title)       Delete the specified game's save."
	echo "revert (game title)       Delete then restore the spcified game's save."
	echo "list                      List games"
	echo "upload                    Upload game saves to Google Drive."
	echo
}

### header
#
# A nice header for information.  Pass in some text to display it.
#
function header() {
	local text="$1"

	echo "================================================"
	echo "$text"
	echo "------------------------------------------------"
}

### footer
#
# A footer to use after certain code execution to provide a nice "block" of info.
# Use below a header obviously.
#
function footer() {
	echo "================================================"
}

### list_games
#
# A new and improved version of the list_games function.  Uses loops to go through the data arrays.
# Prints out the names of all games and archives in the config file.
#
function list_games() {
	# Initialize empty variables
	local title

	# Display a header with the text "Games".
	header "Games"

	# Loop through the array save_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#save_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${save_locations[$index]}"

		# Display message with game title
		echo $title
	done

	# Add a footer after the "Games" category.
	footer

	# Some spacing between categories
	echo
	echo

	# Display a head with the text "Archives".
	header "Archives"

	# Loop through the array archive_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#archive_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${archive_locations[$index]}"

		# Display message with game title
		echo $title
	done

	# Add a footer after the "Archives" category.
	footer
}

# A function to check wether a directory exists or not, and if it is empty.
# Returns 0 if it does not exist, 1 if it exists, 2 if it exists and is empty.
function check_directory() {
	# Variable for the directory to check, passed to the function.
	local directory="$1"

	# Initialize the status to zero.
	local status=0


	# Check if the pc save directory exists.
	if [ -d "$directory" ]; then
		# Check if directory if empty using the find command.
		# It will return the directory path if it is empty.
		local is_empty=$(find "$directory" -maxdepth 0 -type d -empty)

		# If the variable is a non-zero string, meaning the directory is empty.
		if [ -n "$is_empty" ]; then
			# Set status to 2, exists but empty.
			status=2
		else
			# Set status to 1, exists and ready to sync.
			status=1
		fi
	# Or if the string for the save location contains a pattern, i.e. a *.
	# This way we can copy saves from a location that contains other files.
	elif [[ "$directory" =~ '*' ]] || [ -f "$directory" ]; then
		local do_files_exist=$(find $directory -type f)

		# If the variable is a non-zero string, meaning that save files exist.
		if [ -n "${do_files_exist[@]}" ]; then
			status=3
		else
			status=0
		fi
	fi

	# Return the status of the directory.
	# 0: Does not exist
	# 1: Exists
	# 2: Exists but empty
	# 3: Perform a special sync
	echo "$status"
}

### backup_saves
#
# Function to backup game saves to a local drive.  It uses rsync to do this.
#
function backup_saves() {
	# Initialize empty variables
	local title
	local pc_save
	local backup_save

	# If dry-run mode is set, add it to the arguments for rsync.
	if [ $dry_run_mode -eq 1 ]; then
		rsync_arguments+=("--dry-run")
	fi


	# Loop through the array save_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#save_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${save_locations[$index]}"

		# PC save location
		# Current index+1
		pc_save="${save_locations[$index+1]}"

		# Backup save location
		# Current index+2
		backup_save="${save_locations[$index+2]}"

		# Add a header that will display the game's title.
		header "Syncing $title"

		# Check the status of the directory.
		# 0: Does not exist.
		# 1: Exists and ready to sync.
		# 2: Exists but empty.
		directory_status=$(check_directory "$pc_save")


		# Case logic on what to do depending on the directory status.
		case "$directory_status" in
			0)
				echo "PC save directory/files do not exist. Try restoring it."
				echo "Skipping..."
				;;
			1)
				# Call to rsync
				rsync ${rsync_arguments[@]} "$pc_save/" "$backup_save"
				;;
			2)
				echo "PC save directory is empty.  Try restoring it."
				echo "Skipping..."
				;;
			3)
				# Call to special save backup function.
				backup_special_saves "$pc_save" "$backup_save"
				;;
		esac


		# Add a footer.
		footer

		# Give some space to separate each game.
		echo
		echo


	done
}

# A function to backup saves that share the same directory as other files.
# To use it, just specify a pattern for the save files in the config file.
function backup_special_saves() {
	# Initialize empty variables
	local pc_saves="$1"
	local backup_directory="$2"
	local pattern
	local save_directory

	# The actual pattern.
	pattern=$(basename "$pc_saves")

	# Directory of the save files.
	save_directory=$(dirname "$pc_saves")

	# Call to rsync to sync only the specified files.
	# Uses special filters to only copy the specified files.
	rsync ${rsync_arguments[@]} --include="**/$pattern" --exclude="*" "$save_directory/" "$backup_directory/"

}

### archive_saves
#
# A function to compress a directory into a 7z archive.  Useful for games that heavily rely on
# folder structure and to preserve modding, along with saves.  Uses 7zip.
#
function archive_saves() {
	# Initialize empty variables
	local title
	local pc_directory
	local backup_archive

	# Loop through the array save_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#archive_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${archive_locations[$index]}"

		# PC directory location
		# Current index+1
		pc_directory="${archive_locations[$index+1]}"

		# Archive file location
		# Current index+2
		backup_archive="${archive_locations[$index+2]}"

		# Add a header that will display the name of the archive.
		header "Compressing $title"

		# Remove temp archive if it exists.
		if [ -f "$backup_archive.tmp" ]; then
			echo "Temporary archive file found.  Removing..."
			rm --verbose $backup_archive.tmp
		fi

		# Get the status of the directory to be compressed.
		directory_status=$(check_directory "$pc_directory")
		# Logic to check the local save directories.
		case "$directory_status" in
			# The local directory does not exist.
			0)
				echo "Local save directory not found.  Skipping..."
				;;
			# The local directory exists, compress it.
			1)
				# Call to 7zip
				# TODO: Add an explanation for this silly argument.
				7z u -up1q0r2x1y2z1w2 -mx9 -mmt16 "$backup_archive" "$pc_directory"
				;;

			# The local directory exists, but is empty.
			2)
				echo "Local save directory found and it's empty.  Skipping..."
				;;
		esac


		# Add a footer
		footer

		# Give some space to separate each game.
		echo
		echo


	done
}

function restore_save() {
	local game_title
	local does_game_exist=0
	shift

	# Set game_title to arguments if they exist.
	if [ -z "$@" ]; then
		game_title="null"
	else
		game_title="$@"
	fi


	# Check if arguments were supplied.
	# If not, prompt for input
	if [ $game_title == "null" ]; then
		read -p "Please enter game title: " game_title
	fi

	# Initialize empty variables
	local title
	local pc_save
	local backup_save

	# Loop through the array save_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#save_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${save_locations[$index]}"

		# PC directory location
		# Current index+1
		pc_save="${save_locations[$index+1]}"

		# Archive file location
		# Current index+2
		backup_save="${save_locations[$index+2]}"

		# If the game is found in the config array.
		if [ "$title" == "$game_title" ]; then
			does_game_exist=1
			break
		fi
	done

	# If dry-run mode is set, add it to the arguments for rsync.
	if [ $dry_run_mode -eq 1 ]; then
		rsync_arguments+=("--dry-run")
	fi

	# Base case if the game is not found in the config file.
	if [ $does_game_exist -eq 0 ]; then
		echo "Game not found in config!"
		exit 1
	fi

	# Check the status of the directory.
	# 0: Does not exist.
	# 1: Exists and ready to sync.
	# 2: Exists but empty.
	backup_directory_status=$(check_directory "$backup_save")
	local_directory_status=$(check_directory "$pc_save")

	# Logic to check the backup save directories.
	case "$backup_directory_status" in
		0) echo "Backup directory for $title does not exist."; exit 1;;
		1) echo "Backup directory found.";;
		2) echo "Backup directory for $title is empty."; exit 1;;
	esac

	# Logic to check the local save directories.
	case "$local_directory_status" in
		0) echo "Local save directory not found.  Creating..."; mkdir "$pc_save";;
		1) echo "Local save files already exist.  Try deleting first."; exit 1;;
		2) echo "Local save directory found and it's empty.";;
		3) echo "Special save circumstance.  Not implemented yet."; exit 1;;
	esac

	# Call to rsync
	rsync ${rsync_arguments[@]} "$backup_save/" "$pc_save"

}


function restore_archive() {
	echo "Restoring archive."
}

function delete_save() {
	local game_title
	local does_game_exist=0
	local to_continue=0
	shift

	# Set game_title to arguments if they exist.
	if [ -z "$@" ]; then
		game_title="null"
	else
		game_title="$@"
	fi


	# Check if arguments were supplied.
	# If not, prompt for input
	if [ "$game_title" == "null" ]; then
		read -p "Please enter game title: " game_title
	fi

	# Initialize empty variables
	local title
	local pc_save
	local backup_save

	# Loop through the array save_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#save_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${save_locations[$index]}"

		# PC directory location
		# Current index+1
		pc_save="${save_locations[$index+1]}"

		# Archive file location
		# Current index+2
		backup_save="${save_locations[$index+2]}"

		# If the game is found in the config array.
		if [ "$title" == "$game_title" ]; then
			does_game_exist=1
			break
		fi
	done

	# Base case if the game is not found in the config file.
	if [ $does_game_exist -eq 0 ]; then
		echo "Game not found in config!"
		exit 1
	fi

	# Check the status of the directory.
	# 0: Does not exist.
	# 1: Exists and ready to sync.
	# 2: Exists but empty.
	backup_directory_status=$(check_directory "$backup_save")
	local_directory_status=$(check_directory "$pc_save")


	# Logic to check the backup save directories.
	case "$backup_directory_status" in
		0) echo "Backup directory for $title does not exist. The local save will not be deleted."; exit 1;;
		1) echo "Backup directory found.";;
		2) echo "Backup directory for $title is empty.  The local save will not be deleted."; exit 1;;
	esac

	# Logic to check the local save directories.
	case "$local_directory_status" in
		0) echo "Local save directory does not exist."; exit 1;;
		1) echo "Local save files found.";;
		2) echo "Local save directory found and it's empty.";;
	esac

	# Display a prompt to ask to continue or not.
	read -p "Do you want to delete local saves for $title?(y/n): " to_continue
	case "$to_continue" in
		"Y"|"y") rm --recursive --verbose "$pc_save";;
		"N"|"n") echo "Aborting.  Nothing will be deleted.";;
		*) echo "Enter only y/n."; exit 1;;
	esac


}

### upload_saves
# Function to upload saves to Google Drive.  Uses rclone to accomplish this.
#
# rclone will sync all files with the cloud.  It will create all necessary directories,
# preserve timestamps, and delete files no longer in the source.
#
# It should be noted that this will only upload the save files and not the archives,
# they are much too large to store in the cloud.
#
function upload_saves() {
	# Opening message
	echo "Uploading to GDrive."

	# Initialize empty variables
	local title
	local pc_save
	local backup_save

	# Arguments for the sync operation of rclone.  Also a placeholder for dry-run mode.
	rclone_arguments="--progress --metadata --human-readable --check-first --checksum"

	# If dry-run mode is set, add it to the arguments for rclone.
	if [ $dry_run_mode -eq 1 ]; then
		rclone_arguments+=("--dry-run")
	fi


	# Loop through the array save_locations.  The step increment is set to size_of_data_block.
	# In this case the config file has a data block size of 3.
	for ((index=0; index < ${#save_locations[@]}; index+="$size_of_data_block")); do
		# Name of game
		title="${save_locations[$index]}"

		# PC save location
		# Current index+1
		pc_save="${save_locations[$index+1]}"

		# Backup save location
		# Current index+2
		backup_save="${save_locations[$index+2]}"

		# Call to sync_saves
		# Display message with game title
		header "Uploading: $title"

		# If the save directory does not exist, skip it.
		if [ ! -d "$backup_save" ]; then
			echo "Backup save directory does not exist."
			echo "Skipping..."
		else
			# Use rclone to sync files to Google Drive.
			# rclone will automatically make the directory if it does not exist.
			rclone sync ${rclone_arguments[@]} "$backup_save" "$rclone_backup_location/$title"

		fi

		# Add a footer to the end.
		footer

		# Give a space to separate each game.
		echo
		echo


	done

}

### parse_conf
# Function to parse the configuration files for the script.  The config file information will be
# stored in two arrays with global access.
#
# This should be run first to avoid any bugs and ensure the data is available to the script.
#
function parse_conf() {
	# Copy contents of conf_file into an array called game_info
	# Expression 1 is used to remove any lines beginning with a comment, or having a comment at the end of the line.
	# Expression 2 will delete any blank lines in the file.
	# Expression 3 is used to remove the formatting of the conf_file (title=, pc=, backup=).
	# Expression 4 is used to remove quotation marks ".
	mapfile -t save_locations < <(\
		sed \
		--regexp-extended \
		--expression='s/[[:space:]]*#.*//' \
		--expression='/^[[:space:]]*$/d' \
		--expression='s/^[[:alpha:]]+=//' \
		--expression='s/"//g' \
		"$save_locations_conf"\
	)

	mapfile -t archive_locations < <(\
		sed \
		--regexp-extended \
		--expression='s/[[:space:]]*#.*//' \
		--expression='/^[[:space:]]*$/d' \
		--expression='s/^[[:alpha:]]+=//' \
		--expression='s/"//g' \
		"$archive_locations_conf"\
	)
}


#####################
### Get Arguments ###
#####################
function get_args() {
	while getopts ":ahln" option; do
		case $option in
			a) archive_mode=1; echo "Archive mode: ON";;
			h) help_section; exit;;
			l) list_games; exit;;
			n) dry_run_mode=1; echo "Dry-run mode: ON";;
			\?) echo Error: invalid option; exit 1;;
		esac
	done
}


############
### Main ###
############
function main() {
	local arguments="$@"
	local game_title=""

	# Strip out any flag arguments if they exist.
	if [ $# -gt 1 ]; then
		shift $((OPTIND-1))
	fi

	# The command passed to the script.
	local command="$1"

	# If no commands were passed, show the help section and exit.
	if [ -z "$command" ]; then
		help_section
		exit
	fi

	# Main case logic.
	case "$command" in
		"") help_section; exit;;

		backup) backup_saves; exit;;

		archive) archive_saves; exit;;

		upload) upload_saves; exit;;

		list) list_games; exit;;

		restore)
			##[[ "$2" == "-a" ]] && restore_archive "$@" && exit
			restore_save "$@"
			exit;;
		delete)
			delete_save "$@"
			exit;;
		revert)
			delete_save "$@"
			restore_save "$@"
			exit;;

		*) echo "Invalid command"; exit 1;;
	esac
}


#############
### Start ###
#############
parse_conf
get_args "$@"
main "$@"
