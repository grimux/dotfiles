#!/usr/bin/env bash
#
# doom
#
### Description ############################################################################################
# Script for launching doom and the vairous mods I play.  GZDoom is very specific with how it handles mods
# and saves.  A consistent mod profile is needed when playing on the same savegames, so I created this
# script to automate that based on mod profiles.
############################################################################################################

### TODO ####################################################################
# - Finish implementing config parsing
# - Implement a modifiers system, i.e. ColourfulDoom etc.
#############################################################################

### Script Fail Events ###
# e - script stops on error
# u - error if undefined variable
# o pipefail - script fails if command piped fails
# x - output each line (debug)
#
#set -euox pipefail
set -euo pipefail




####################
### Global Flags ###
####################
# Use dmenu to choose mod.
use_dmenu=0
use_zenity=0
use_steam=0
choose_map=0




##############
### Config ###
##############
gzdoom_ini_file="$HOME/.config/gzdoom/gzdoom.ini"
doomdir="$HOME/Games/gzdoom"
modsdir="$doomdir/mods"
mapsdir="$modsdir/map_packs"
addonsdir="$modsdir/addons"
savedir="$doomdir/save"




####################
### Mod Profiles ###
####################
# This file contains the mod profiles, inside a case statement.
# This makes it convienent to keep the profiles and launcher script separate.
mod_profiles="$HOME/.config/gzdoom/mod_profiles.sh"
source $mod_profiles




#######################
### Data and Arrays ###
#######################
### Listing of all the mod groupings. ###
# This greps out the formated mod names in the ini file, then puts them into an array.
# Formatting '[' and ']' are removed using sed.  This displays a nice clean name.
#mods_list=($(grep '\[.*\]' $ini_file | sed -e 's/\[//' -e 's/\]//'))

# Map Packs
map_packs_array=$(find $mapsdir -type f -iname '*.wad' -printf '%f\n' -o -iname '*.pk3' -printf '%f\n' | sort)

# Modifiers list
modifiers_list=(
	""
)




#################
### Functions ###
#################
# Help Section
function help_section() {
	echo "A script to launch Doom and its various mods."
	echo
	echo "Syntax: $(basename "$0") [-h|d|z|l|s] [mod name]"
	echo "options:"
	echo "h     Print this help screen."
	echo "d     Choose mod in dmenu."
	echo "z     Choose mod in zenity."
	echo "m     Choose map pack."
	echo "l     List installed mods."
	echo "s     Use Steam."
	echo
}


## Arguments ##
#-------------#
# Get arguments passed to the script
function get_arguments() {
	while getopts ":hldmsz" option; do
		case $option in
			# Use dmenu
			d) echo "Using dmenu."; use_dmenu=1;;

			# Show help section and exit.
			h) help_section; exit;;

			# List out the mod profiles and map packs avalible.
			l)
				echo "Mod Profiles:"
				echo "-------------"
				list_mod_profiles
				echo
				echo "Map Pack:"
				echo "---------"
				list_map_packs
				exit
				;;

			# Set flag to choose map pack.
			m) echo "Map pack will be chosen."; choose_map=1;;

			# Set flag to use Steam.
			s) echo "Using Steam."; use_steam=1;;

			# Set flag to use Zentiy to choose everything.
			z) echo "Using zenity."; use_zenity=1;;

			# Base case, if there is an invalid option
			\?) echo "Error: Invalid option"; exit 1;;

		esac
	done
}


##-------------------##
## Listing functions ##
##-------------------##
# List the mods
function list_mod_profiles() {
	# Simply print the array $mods_list
	printf "%s\n" "${mod_profile_array[@]}"
}

function list_map_packs() {
	# Simply print the array of map packs
	printf "%s\n" "${map_packs_array[@]}"
}


##-----------------------##
## Choosing mod profiles ##
##-----------------------##
# Choose the mod profile using dmenu.
function choose_profile_in_dmenu() {
	# Local variable to store the mod choice and the prompt.
	local prompt="Doom Profiles:"
	local dmenu_choice

	# Mod choice variable is equal to the selection from dmenu.
	dmenu_choice=$(printf '%s\n' "${mod_profile_array[@]}" | dmenu -i -l 20 -p "$prompt")

	# Return profile the choice.
	echo "$dmenu_choice"
}

# Choose the mod profile using zenity.
function choose_profile_in_zenity() {
	# Local variable to store the mod choice in.
	local prompt="Doom Profiles"
	local zenity_choice

	# Mod profile choice is equal to the selection from zenity.
	zenity_choice=$(printf '%s\n' "${mod_profile_array[@]}" | zenity --title="$prompt" --width 400 --height 600 --list --column "$prompt")

	# Return the choice
	echo "$zenity_choice"
}


##---------------##
## Choosing Maps ##
##---------------##
# Choose the map pack using dmenu.
function choose_map_in_dmenu() {
	# Local variables to store the map choice and the prompt.
	local prompt="Map packs:"
	local dmenu_choice

	# Map choice variable is equal to the selection from dmenu.
	dmenu_choice=$(printf '%s\n' "${map_packs_array[@]}" | dmenu -i -l 20 -p "$prompt")

	# Return the map choice.
	echo "$dmenu_choice"
}

# Choose the mod profile using zenity.
function choose_map_in_zenity() {
	# Local variable to store the mod choice in.
	local prompt="Map packs:"
	local zenity_choice

	# Map choice is equal to the selection from zenity.
	zenity_choice=$(printf '%s\n' "${map_packs_array[@]}" | zenity --title="$prompt" --width 400 --height 600 --list --column "$prompt")

	# Check to see if anything was chosen, if not then exit.
	if [ -z "$zenity_choice" ]; then
		echo "No map pack selected."
		exit 1
	fi

	# Return the choice
	echo "$zenity_choice"
}


##----------------##
## Launching Doom ##
##----------------##
# Launch doom
function launch_doom() {
	# Local functions to store the arguments passed to the function.
	# This helps with organization.
	local iwad="$1"
	local wads="$2"
	local map_pack="$3"
	local savedir="$4"
	local map="$5"
	local cheats="$6"
	local skill="$7"
	local program_to_use="gzdoom"
	local steam_id

	# Set the steam id for the corresponding game, Doom 1 or Doom 2.
	# doom1: 2280
	# doom2: 2300
	case $iwad in
		"DOOM.WAD") steam_id=2280;;
		"DOOM2.WAD") steam_id=2300;;
		"doom_complete.pk3") steam_id=2300;;
		"DOOM64.CE.ipk3") steam_id=1148590;;
		"") echo "iwad is empty string"; exit 1;;
	esac

	# Check to see if Steam should be used.
	if [ $use_steam -eq 1 ]; then
		program_to_use="steam -applaunch $steam_id"
	fi

	$program_to_use \
		-iwad $iwad \
		-file $wads $map_pack \
		-savedir $savedir \
		$map \
		$cheats \
		$skill
}

# Check if the mod exists within the array.
function check_mods() {
	# First argument is the user's input, which mod to select.
	local mod_to_check="$1"

	# Local variables
	local title
	local does_it_exist

	# Loop through the mod_profile_array and check if the mod is there.
	for title in ${mod_profile_array[@]}; do
		# If there is a match, set does_it_exist to 1 and stop.
		if [ "$mod_to_check" == "$title" ]; then
			does_it_exist=1
			break
		# Otherwise, set the flag to 0.
		else
			does_it_exist=0
		fi
	done

	# Return 1 if the title exists, 0 if not
	echo "$does_it_exist"
}


##-------------------##
## Cleanup Functions ##
##-------------------##
#
## Fix gzdoom.ini ##
# Prepare the gzdoom ini file for git.
# Basically, this removes the date header of the file.  This gets generated every time
# gzdoom is launched.  Very annoying to track with git, this will remove that date.
function fix_ini_for_git() {
	# -n +2 : start at line 2 of the file.
	echo "$(tail -n +2 "$gzdoom_ini_file")" > "$gzdoom_ini_file"
}

# Function to fix the caps lock returning to normal after using gzdoom.
function fix_caps_lock() {
	setxkbmap -option caps:escape
}

# A function to clean up after using the script.
function clean_up() {
	fix_ini_for_git
	fix_caps_lock
}


######################
### Main Functions ###
######################
#
# Main is a working script.  Any testing should be done in the testing function.
# Leave this as a complete and working script.
#
##------##
## Main ##
##------##
function main() {
	# Local variables.
	local does_mod_exist
	local chosen_mod
	local map_pack


	## Get arguments ##
	##---------------##
	# Get flag options passed to the script.
	get_arguments "$@"

	# If there were any options passed to the script, remove them.
	if [ $# -gt 1 ]; then
		# First, remove the leading arguments, "-s".
		shift $(( OPTIND - 1 ))
	fi

	## Main Logic ##
	##------------##
	# Check to see if we are using dmenu or not.
	if [ "$use_dmenu" -eq 1 ]; then
		# If so, set chosen mod to the output of choose_in_dmenu function.
		chosen_mod=$(choose_profile_in_dmenu)

	# Use zenity to set the chosen mod.
	elif [ "$use_zenity" -eq 1 ]; then
		chosen_mod=$(choose_profile_in_zenity)

	# Else if there are no arguments.
	elif [ -z "$@" ]; then
		chosen_mod="chill_doom"

	# Base case when an argument is supplied.  Expects mod name.
	else
		chosen_mod="$@"
	fi

	## Does mod exist? ##
	##-----------------##
	# Check if the mod exists within the mod_profile_array.
	# Returns 1 if it exists, 0 if not.
	does_mod_exist=$(check_mods "$chosen_mod")

	# If the mod does not exist, tell us and exit with error.
	if [ "$does_mod_exist" -eq 0 ]; then
		echo "That mod is not in the array."
		exit 1
	fi


	## Source .config/gzdoom/mod_profiles.sh ##
	##---------------------------------------##
	# Call mod_profiles, sourced from mod_profiles
	mod_profiles "$chosen_mod"

	## Choose a map pack ##
	##-------------------##
	# Here is where to check whether to choose a map pack or not.
	if [ "$choose_map" -eq 1 ]; then
		if [ "$use_dmenu" -eq 1 ]; then
			map_pack=$(choose_map_in_dmenu)
		else
			map_pack=$(choose_map_in_zenity)
		fi
	else
		map_pack=""
	fi

	## Launch gzdoom, with or without Steam. ##
	##---------------------------------------##
	# Call to launch doom with all the parameters
	launch_doom "$iwad" "$wads" "$map_pack" "$savedir" "$maps" "$cheats" "$skill"
}

##---------##
## Testing ##
##---------##
#
# This function is used to toggle functions that I am testing.  These will usually break things and
# can be unpredictible.  Be careful.
#
function testing() {
	echo "Using testing function."

}


###################
### Entry Point ###
###################
# Only choose one main function to run, "main" or "testing".
# Call to main, the working script.
main "$@"

# Call to the testing section.
#testing "$@"

#############
## Cleanup ##
#############
clean_up

############
### Exit ###
############
exit
